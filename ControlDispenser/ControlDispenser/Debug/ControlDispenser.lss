
ControlDispenser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000280  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800060  00800060  00000314  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000437  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001cd  00000000  00000000  000007bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e6  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00000b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ee  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fe  00000000  00000000  00000e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	9b c0       	rjmp	.+310    	; 0x14e <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	26 c1       	rjmp	.+588    	; 0x268 <__vector_13>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 38       	cpi	r26, 0x88	; 136
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	12 d0       	rcall	.+36     	; 0x68 <main>
  44:	1b c1       	rjmp	.+566    	; 0x27c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <delayms>:
	return;
}

void delayms(unsigned int intSec)
{
	for(;intSec>0;intSec--)
  48:	00 97       	sbiw	r24, 0x00	; 0
  4a:	49 f0       	breq	.+18     	; 0x5e <delayms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4c:	e7 ee       	ldi	r30, 0xE7	; 231
  4e:	f3 e0       	ldi	r31, 0x03	; 3
  50:	31 97       	sbiw	r30, 0x01	; 1
  52:	f1 f7       	brne	.-4      	; 0x50 <delayms+0x8>
  54:	00 c0       	rjmp	.+0      	; 0x56 <delayms+0xe>
  56:	00 00       	nop
  58:	01 97       	sbiw	r24, 0x01	; 1
  5a:	00 97       	sbiw	r24, 0x00	; 0
  5c:	b9 f7       	brne	.-18     	; 0x4c <delayms+0x4>
  5e:	08 95       	ret

00000060 <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
  60:	5d 9b       	sbis	0x0b, 5	; 11
  62:	fe cf       	rjmp	.-4      	; 0x60 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR = data;
  64:	8c b9       	out	0x0c, r24	; 12
  66:	08 95       	ret

00000068 <main>:
static void delayms(unsigned int intSec);
static void USART_Init(unsigned char baud);


int main(void) {
	DDRC = 0x3F;  //111111
  68:	8f e3       	ldi	r24, 0x3F	; 63
  6a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x0E; //001110
  6c:	8e e0       	ldi	r24, 0x0E	; 14
  6e:	85 bb       	out	0x15, r24	; 21
	DDRD =  0b00000000;
  70:	11 ba       	out	0x11, r1	; 17
	PORTD = 0b11111100;
  72:	8c ef       	ldi	r24, 0xFC	; 252
  74:	82 bb       	out	0x12, r24	; 18
}

static void USART_Init(unsigned char baud)
{
	// Set baud rate
	UBRRH = baud>>8;
  76:	10 bc       	out	0x20, r1	; 32
	UBRRL = baud;
  78:	89 e1       	ldi	r24, 0x19	; 25
  7a:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and tramsmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
  7c:	88 e1       	ldi	r24, 0x18	; 24
  7e:	8a b9       	out	0x0a, r24	; 10
	// Enable Interrupt
	UCSRB |= (1<<RXCIE)|(1<<TXCIE);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 6c       	ori	r24, 0xC0	; 192
  84:	8a b9       	out	0x0a, r24	; 10
	// Set I-bit global interrupt enable
	sei();
  86:	78 94       	sei
	// Set frame format: 8data, NoneParity, 1stop bit
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
	DDRD =  0b00000000;
	PORTD = 0b11111100;
	//ADCSRA = 0x00;
	USART_Init(25);
	uint8_t data;
	data_ok = 0;
  8c:	10 92 72 00 	sts	0x0072, r1
  90:	10 92 71 00 	sts	0x0071, r1
	data_connect = 0;
  94:	10 92 87 00 	sts	0x0087, r1
  98:	10 92 86 00 	sts	0x0086, r1
	int a = 0;
	int b = 0;
	sbi(PORTC,0);
  9c:	a8 9a       	sbi	0x15, 0	; 21
	//Turn on Computer
	sbi(PORTC,5);
  9e:	ad 9a       	sbi	0x15, 5	; 21
	delayms(2000);
  a0:	80 ed       	ldi	r24, 0xD0	; 208
  a2:	97 e0       	ldi	r25, 0x07	; 7
  a4:	d1 df       	rcall	.-94     	; 0x48 <delayms>
	cbi(PORTC,5);
  a6:	ad 98       	cbi	0x15, 5	; 21
	
	
	delayms(8000);
  a8:	80 e4       	ldi	r24, 0x40	; 64
  aa:	9f e1       	ldi	r25, 0x1F	; 31
  ac:	cd df       	rcall	.-102    	; 0x48 <delayms>
	USART_Init(25);
	uint8_t data;
	data_ok = 0;
	data_connect = 0;
	int a = 0;
	int b = 0;
  ae:	c1 2c       	mov	r12, r1
  b0:	d1 2c       	mov	r13, r1
		cbi(PORTC,0);
		delayms(1200);
		
		
		data = 0b00000000;
		if (bit_is_clear(PIND,2)){//Empty
  b2:	ee 24       	eor	r14, r14
  b4:	e3 94       	inc	r14
	
	delayms(8000);
	
	while (1)
	{
		sbi(PORTC,0);
  b6:	a8 9a       	sbi	0x15, 0	; 21
		delayms(200);
  b8:	88 ec       	ldi	r24, 0xC8	; 200
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	c5 df       	rcall	.-118    	; 0x48 <delayms>
		cbi(PORTC,0);
  be:	a8 98       	cbi	0x15, 0	; 21
		delayms(1200);
  c0:	80 eb       	ldi	r24, 0xB0	; 176
  c2:	94 e0       	ldi	r25, 0x04	; 4
  c4:	c1 df       	rcall	.-126    	; 0x48 <delayms>
		
		
		data = 0b00000000;
		if (bit_is_clear(PIND,2)){//Empty
  c6:	f0 b2       	in	r15, 0x10	; 16
  c8:	f2 fa       	bst	r15, 2
  ca:	ff 24       	eor	r15, r15
  cc:	f0 f8       	bld	r15, 0
  ce:	1f 2d       	mov	r17, r15
  d0:	1e 25       	eor	r17, r14
			data |= 0b00000001;
		}
		
		if (bit_is_clear(PIND,3)){//Low
  d2:	83 9b       	sbis	0x10, 3	; 16
			data |= 0b00000010;
  d4:	12 60       	ori	r17, 0x02	; 2
		}
		if (bit_is_clear(PIND,4)){//Read OK
  d6:	84 99       	sbic	0x10, 4	; 16
  d8:	02 c0       	rjmp	.+4      	; 0xde <main+0x76>
			data |= 0b00000100;
  da:	14 60       	ori	r17, 0x04	; 4
  dc:	05 c0       	rjmp	.+10     	; 0xe8 <main+0x80>
			}else{
			cbi(PORTC,3);
  de:	ab 98       	cbi	0x15, 3	; 21
			delayms(200);
  e0:	88 ec       	ldi	r24, 0xC8	; 200
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	b1 df       	rcall	.-158    	; 0x48 <delayms>
			sbi(PORTC,3);
  e6:	ab 9a       	sbi	0x15, 3	; 21
		}
		
		if (bit_is_clear(PIND,5)){//Green Btn
  e8:	85 9b       	sbis	0x10, 5	; 16
			data |= 0b00001000;
  ea:	18 60       	ori	r17, 0x08	; 8
		}
		if (bit_is_clear(PIND,6)){//Red Btn
  ec:	86 9b       	sbis	0x10, 6	; 16
			data |= 0b00010000;
  ee:	10 61       	ori	r17, 0x10	; 16
		}
		
		if (bit_is_clear(PIND,7)){//Loop
  f0:	87 9b       	sbis	0x10, 7	; 16
			data |= 0b00100000;
  f2:	10 62       	ori	r17, 0x20	; 32
		}
		
		if(data_ok == 1){
  f4:	20 91 71 00 	lds	r18, 0x0071
  f8:	30 91 72 00 	lds	r19, 0x0072
  fc:	21 30       	cpi	r18, 0x01	; 1
  fe:	31 05       	cpc	r19, r1
 100:	81 f4       	brne	.+32     	; 0x122 <main+0xba>
			if(bit_is_clear(PIND,5)){
 102:	85 99       	sbic	0x10, 5	; 16
 104:	0e c0       	rjmp	.+28     	; 0x122 <main+0xba>
				if(bit_is_clear(PIND,7)){
 106:	87 99       	sbic	0x10, 7	; 16
 108:	0c c0       	rjmp	.+24     	; 0x122 <main+0xba>
					if(bit_is_clear(PIND,4)){
 10a:	84 99       	sbic	0x10, 4	; 16
 10c:	0a c0       	rjmp	.+20     	; 0x122 <main+0xba>
						cbi(PORTC,3);
 10e:	ab 98       	cbi	0x15, 3	; 21
						delayms(200);
 110:	88 ec       	ldi	r24, 0xC8	; 200
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	99 df       	rcall	.-206    	; 0x48 <delayms>
						sbi(PORTC,3);
 116:	ab 9a       	sbi	0x15, 3	; 21
						data_ok = 0;
 118:	10 92 72 00 	sts	0x0072, r1
 11c:	10 92 71 00 	sts	0x0071, r1
						data |= 0b01000000;
 120:	10 64       	ori	r17, 0x40	; 64
					}
				}
			}
		}
		
		if(data_connect == 1){
 122:	20 91 86 00 	lds	r18, 0x0086
 126:	30 91 87 00 	lds	r19, 0x0087
 12a:	21 30       	cpi	r18, 0x01	; 1
 12c:	31 05       	cpc	r19, r1
 12e:	29 f4       	brne	.+10     	; 0x13a <main+0xd2>
			data |= 0b10000000;
 130:	10 68       	ori	r17, 0x80	; 128
			data_connect = 0;
 132:	10 92 87 00 	sts	0x0087, r1
 136:	10 92 86 00 	sts	0x0086, r1
		}
		
		a = data;
 13a:	c1 2f       	mov	r28, r17
 13c:	d0 e0       	ldi	r29, 0x00	; 0
		if(a != b){
 13e:	cc 15       	cp	r28, r12
 140:	dd 05       	cpc	r29, r13
 142:	09 f4       	brne	.+2      	; 0x146 <main+0xde>
 144:	b8 cf       	rjmp	.-144    	; 0xb6 <main+0x4e>
			USART_Transmit(data);
 146:	81 2f       	mov	r24, r17
 148:	8b df       	rcall	.-234    	; 0x60 <USART_Transmit>
		if(data_connect == 1){
			data |= 0b10000000;
			data_connect = 0;
		}
		
		a = data;
 14a:	6e 01       	movw	r12, r28
 14c:	b4 cf       	rjmp	.-152    	; 0xb6 <main+0x4e>

0000014e <__vector_11>:
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
}


ISR (USART_RXC_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
	unsigned char brx = UDR;
 170:	8c b1       	in	r24, 0x0c	; 12
	RTX[n] = brx;
 172:	90 91 70 00 	lds	r25, 0x0070
 176:	e9 2f       	mov	r30, r25
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	ec 58       	subi	r30, 0x8C	; 140
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	80 83       	st	Z, r24
	n++;
 180:	9f 5f       	subi	r25, 0xFF	; 255
 182:	90 93 70 00 	sts	0x0070, r25
	if (brx == 13) {
 186:	8d 30       	cpi	r24, 0x0D	; 13
 188:	09 f0       	breq	.+2      	; 0x18c <__vector_11+0x3e>
 18a:	5d c0       	rjmp	.+186    	; 0x246 <__vector_11+0xf8>
		
		if (RTX[0] == 'S'){//Connect Check
 18c:	80 91 74 00 	lds	r24, 0x0074
 190:	83 35       	cpi	r24, 0x53	; 83
 192:	39 f4       	brne	.+14     	; 0x1a2 <__vector_11+0x54>
			data_connect = 1;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	90 93 87 00 	sts	0x0087, r25
 19c:	80 93 86 00 	sts	0x0086, r24
 1a0:	0e c0       	rjmp	.+28     	; 0x1be <__vector_11+0x70>
		}
		
		if (RTX[0] == 'R'){//Ready
 1a2:	82 35       	cpi	r24, 0x52	; 82
 1a4:	39 f4       	brne	.+14     	; 0x1b4 <__vector_11+0x66>
			data_ok = 1;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	90 93 72 00 	sts	0x0072, r25
 1ae:	80 93 71 00 	sts	0x0071, r24
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <__vector_11+0x70>
		}
		
		if (RTX[0] == 'W'){//Wait
 1b4:	87 35       	cpi	r24, 0x57	; 87
 1b6:	19 f4       	brne	.+6      	; 0x1be <__vector_11+0x70>
			delayms(3000);
 1b8:	88 eb       	ldi	r24, 0xB8	; 184
 1ba:	9b e0       	ldi	r25, 0x0B	; 11
 1bc:	45 df       	rcall	.-374    	; 0x48 <delayms>
		}
		
		if (RTX[0] == 'L'){
 1be:	80 91 74 00 	lds	r24, 0x0074
 1c2:	8c 34       	cpi	r24, 0x4C	; 76
 1c4:	89 f4       	brne	.+34     	; 0x1e8 <__vector_11+0x9a>
			//USART_Transmit(RTX[1]);
			//USART_Transmit(13);
			if (RTX[1] == 'I'){
 1c6:	80 91 75 00 	lds	r24, 0x0075
 1ca:	89 34       	cpi	r24, 0x49	; 73
 1cc:	31 f4       	brne	.+12     	; 0x1da <__vector_11+0x8c>
				sbi(PORTC,5);
 1ce:	ad 9a       	sbi	0x15, 5	; 21
				delayms(1000);
 1d0:	88 ee       	ldi	r24, 0xE8	; 232
 1d2:	93 e0       	ldi	r25, 0x03	; 3
 1d4:	39 df       	rcall	.-398    	; 0x48 <delayms>
				cbi(PORTC,5);
 1d6:	ad 98       	cbi	0x15, 5	; 21
 1d8:	07 c0       	rjmp	.+14     	; 0x1e8 <__vector_11+0x9a>
			}
			else
			if (RTX[1] == 'O')
 1da:	8f 34       	cpi	r24, 0x4F	; 79
 1dc:	91 f5       	brne	.+100    	; 0x242 <__vector_11+0xf4>
			{
				sbi(PORTC,4);
 1de:	ac 9a       	sbi	0x15, 4	; 21
				delayms(1000);
 1e0:	88 ee       	ldi	r24, 0xE8	; 232
 1e2:	93 e0       	ldi	r25, 0x03	; 3
 1e4:	31 df       	rcall	.-414    	; 0x48 <delayms>
				cbi(PORTC,4);
 1e6:	ac 98       	cbi	0x15, 4	; 21
			}
		}
		
		if (RTX[0] == 'C'){
 1e8:	80 91 74 00 	lds	r24, 0x0074
 1ec:	83 34       	cpi	r24, 0x43	; 67
 1ee:	49 f5       	brne	.+82     	; 0x242 <__vector_11+0xf4>
			//PINC 3 = Dispenser 4 = PayOut
			//PINC 2 = Dispenser 5 = Reset
			//PINC 1 = Dispenser 8 = Callback
			//USART_Transmit(RTX[1]);
			//USART_Transmit(13);
			if (RTX[1] == 'P'){
 1f0:	80 91 75 00 	lds	r24, 0x0075
 1f4:	80 35       	cpi	r24, 0x50	; 80
 1f6:	31 f4       	brne	.+12     	; 0x204 <__vector_11+0xb6>
				cbi(PORTC,3);
 1f8:	ab 98       	cbi	0x15, 3	; 21
				delayms(80);
 1fa:	80 e5       	ldi	r24, 0x50	; 80
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	24 df       	rcall	.-440    	; 0x48 <delayms>
				sbi(PORTC,3);
 200:	ab 9a       	sbi	0x15, 3	; 21
 202:	1f c0       	rjmp	.+62     	; 0x242 <__vector_11+0xf4>
			}
			else
			if (RTX[1] == 'R')
 204:	82 35       	cpi	r24, 0x52	; 82
 206:	71 f4       	brne	.+28     	; 0x224 <__vector_11+0xd6>
			{
				cbi(PORTC,2);
 208:	aa 98       	cbi	0x15, 2	; 21
				delayms(80);
 20a:	80 e5       	ldi	r24, 0x50	; 80
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	1c df       	rcall	.-456    	; 0x48 <delayms>
				sbi(PORTC,2);
 210:	aa 9a       	sbi	0x15, 2	; 21
				cbi(PORTC,3);
 212:	ab 98       	cbi	0x15, 3	; 21
				delayms(80);
 214:	80 e5       	ldi	r24, 0x50	; 80
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	17 df       	rcall	.-466    	; 0x48 <delayms>
				sbi(PORTC,3);
 21a:	ab 9a       	sbi	0x15, 3	; 21
				delayms(300);
 21c:	8c e2       	ldi	r24, 0x2C	; 44
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	13 df       	rcall	.-474    	; 0x48 <delayms>
 222:	0f c0       	rjmp	.+30     	; 0x242 <__vector_11+0xf4>
			}
			else
			if (RTX[1] == 'B')
 224:	82 34       	cpi	r24, 0x42	; 66
 226:	69 f4       	brne	.+26     	; 0x242 <__vector_11+0xf4>
			{
				cbi(PORTC,1);
 228:	a9 98       	cbi	0x15, 1	; 21
				delayms(80);
 22a:	80 e5       	ldi	r24, 0x50	; 80
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0c df       	rcall	.-488    	; 0x48 <delayms>
				sbi(PORTC,1);
 230:	a9 9a       	sbi	0x15, 1	; 21
				cbi(PORTC,3);
 232:	ab 98       	cbi	0x15, 3	; 21
				delayms(80);
 234:	80 e5       	ldi	r24, 0x50	; 80
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	07 df       	rcall	.-498    	; 0x48 <delayms>
				sbi(PORTC,3);
 23a:	ab 9a       	sbi	0x15, 3	; 21
				delayms(4000);
 23c:	80 ea       	ldi	r24, 0xA0	; 160
 23e:	9f e0       	ldi	r25, 0x0F	; 15
 240:	03 df       	rcall	.-506    	; 0x48 <delayms>
			}
		}
		
		n = 0;
 242:	10 92 70 00 	sts	0x0070, r1
		

	}
	return;
}
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	bf 91       	pop	r27
 24c:	af 91       	pop	r26
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	7f 91       	pop	r23
 254:	6f 91       	pop	r22
 256:	5f 91       	pop	r21
 258:	4f 91       	pop	r20
 25a:	3f 91       	pop	r19
 25c:	2f 91       	pop	r18
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <__vector_13>:

ISR (USART_TXC_vect)
{
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
	return;
}
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
